{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/abstracts/Clickable.js",
    "src/index.js",
    "src/objects/Coffee.js",
    "src/objects/Customer.js",
    "src/objects/CustomerFactory.js",
    "src/objects/Machine.js",
    "src/objects/Player.js",
    "src/objects/Stats.js",
    "src/states/Boot.js",
    "src/states/CoffeeShop.js",
    "src/states/GameOver.js",
    "src/states/Preloader.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "class Clickable extends Phaser.Sprite {\n  constructor(game, x, y, key) {\n    super(game, x, y, key)\n\n    this._bmd = game.make.bitmapData()\n    this._bmd.load(key)\n    this._bmd.replaceRGB(0, 0, 0, 255, 255, 255, 255, 255);\n    this._key = key\n\n    this.inputEnabled = true\n    this.input.pixelPerfectOver = true;\n    this.input.useHandCursor = true;\n\n    this.events.onInputOver.add(this.recolorOver, this)\n    this.events.onInputOut.add(this.recolorOut, this)\n    this.events.onInputDown.add(this.action, this)\n    // this.events.onInputDown.add(this.particle, this);\n  }\n\n  // action() {}\n\n  recolorOver() {\n    this.loadTexture(this._bmd)\n    // this.setType()\n  }\n  recolorOut() {\n    this.loadTexture(this._key)\n    // this.setType()\n  }\n\n  setType() {\n    if(this._type) {\n      this.frame = this._type\n    }\n  }\n\n  addTimeToPass(time) {\n    let timeToPass = (time * 0.7) / (0.2 + (this.game.global.energy / 100))\n    console.log(timeToPass);\n    this.game.global.timeToPass += timeToPass\n  }\n\n  particle() {}\n\n}\n\nexport default Clickable\n",
    "import Boot from 'states/Boot';\nimport Preloader from 'states/Preloader';\n\nimport CoffeeShop from 'states/CoffeeShop'\nimport GameOver from 'states/GameOver';\n\n\nclass Game extends Phaser.Game {\n\n  constructor() {\n    super(200, 150, Phaser.AUTO, 'content', null);\n    this.state.add('Boot', Boot, false);\n    this.state.add('Preloader', Preloader, false);\n    this.state.add('CoffeeShop', CoffeeShop, false);\n    this.state.add('GameOver', GameOver, false);\n    this.state.start('Boot');\n  }\n\n}\n\nnew Game();\n",
    "import Clickable from 'abstracts/Clickable'\n\nclass Coffee extends Clickable {\n  constructor(game, x, y) {\n    super(game, x, y, 'coffee')\n\n    this._energy = 13\n    this._damage = 1\n    this._timeCost = 10 * 60 // [s]\n    // this._cost = 3\n\n    this.game.stage.addChild(this)\n  }\n\n  action() {\n    this.game.global.dS.play()\n    this.game.global.player.moveTo(112, this.y + 20)\n    this.game.global.energy += this._energy\n    this.game.global.damage += this._damage\n    this.addTimeToPass(this._timeCost)\n    // TODO: Pokazuj odjety koszt\n    // console.log(this.game.global.energy)\n    this.destroy()\n  }\n}\n\nexport default Coffee\n",
    "import Clickable from 'abstracts/Clickable'\n\nclass Customer extends Clickable {\n  constructor(game, x, y, type) {\n    super(game, x, y, 'customer')\n    this._type = type\n    this._state = 0\n    this._bmd = 'customer_w'\n    this.setType()\n    this._energy = 3\n    this._pays = 12\n    this._timeCost = 1 * 60 // [s]\n    this._waitTime = game.rnd.integerInRange(30, 90) * 60\n    this._enterTime = game.global.timePassed\n\n    this.emitter = game.add.emitter(0, 0, 100);\n\n    this.emitter.makeParticles('cash');\n    this.emitter.gravity = 200;\n\n    this.anchor.set(0.5, 1)\n\n    this.game.stage.addChild(this)\n  }\n\n  action() {\n    this.game.global.player.moveTo(112, this.y)\n    this.game.global.energy -= this._energy * 0.2\n    this.addTimeToPass(this._timeCost * 0.2)\n    let drink = this.game.global.coffeeCounter.getFirstAlive()\n    if(drink) {\n      this.game.global.sS.play()\n      this.game.global.energy -= this._energy\n      this.addTimeToPass(this._timeCost)\n      let pay = this._pays - this._state\n      this.game.global.money += pay\n      drink.destroy()\n      this.particle(4 - this._state)\n      this.destroy()\n\n    }\n\n  }\n\n  update() {\n    // console.log('up');\n    this._state = Math.floor(((this.game.global.timePassed - this._enterTime) / this._waitTime) * 4)\n\n    this.setType()\n    if(this.game.global.timePassed - this._enterTime > this._waitTime) {\n      this.destroy()\n    }\n  }\n\n  recolorOver() {\n    // console.log(((this.game.global.timePassed - this._enterTime) / this._waitTime) * 100,\n    //   Math.floor(((this.game.global.timePassed - this._enterTime) / this._waitTime) * 4));\n    // console.log(this._type, this._state);\n    // console.log(this.frame);\n    this.loadTexture(this._bmd)\n    this.setType()\n  }\n\n  setType() {\n    if(typeof this._type !== 'undefined') {\n      this.frame = this._type + this._state\n    }\n  }\n\n  particle(amount) {\n    this.emitter.x = this.centerX;\n    this.emitter.y = this.centerY;\n\n    this.emitter.start(true, 1000, null, amount);\n  }\n}\n\nexport default Customer\n",
    "import Customer from 'objects/Customer'\n\nclass CustomerFactory {\n  constructor() {\n    this.RATIO = Math.PI * 2 / (Phaser.Timer.SECOND * (24 * 60 * 60))\n    this.PHASE_SHIFT = 12 * Phaser.Timer.SECOND * (60 * 60) * this.RATIO\n  }\n\n\n\n  createCustomer(game) {\n    let rectangle = new Phaser.Rectangle(5, 60, 66, 40)\n    let p = new Phaser.Point()\n    rectangle.random(p)\n    p.floor()\n    // laol\n    let type = 4 * game.rnd.integerInRange(0, 3)\n    let customer = new Customer(game, p.x, p.y, type)\n    game.global.customerQueue.add(customer)\n  }\n\n  intensity(miliseconds) {\n    let time = miliseconds * this.RATIO\n    let x = Math.cos(time + this.PHASE_SHIFT) * 0.4\n    x += Math.cos(time * 2 + this.PHASE_SHIFT) * 0.2\n    x += Math.cos(time * 4 + this.PHASE_SHIFT) * 0.2\n    x = ((x + 1) / 2) / 8\n    return x\n  }\n\n  inviteCustomer(game, miliseconds) {\n    // console.log(this.intensity(miliseconds));\n    if(Math.random() < this.intensity(miliseconds)) {\n      this.createCustomer(game)\n    }\n  }\n\n}\n\nexport default CustomerFactory\n",
    "import Coffee from 'objects/Coffee'\nimport Clickable from 'abstracts/Clickable'\n\nclass Machine extends Clickable {\n  constructor(game, x, y) {\n    super(game, x, y, 'machine')\n\n    this._energyCost = 3\n    this._moneyCost = 2\n    this._timeCost = 5 * 60\n\n    this.game.stage.addChild(this)\n  }\n\n  action() {\n    if(this.game.global.money > 0) {\n      this.game.global.mS.play()\n      this.game.global.player.moveTo(this.game.input.x + 20, 63)\n      this.game.global.energy -= this._energyCost\n      this.game.global.money -= this._moneyCost\n      this.addTimeToPass(this._timeCost)\n\n      // console.log(this.game.global.energy)\n      let rectangle = new Phaser.Rectangle(85, 50, 15, 40)\n      let p = new Phaser.Point()\n      rectangle.random(p)\n      p.floor()\n      let coffee = new Coffee(this.game, p.x, p.y)\n      // TODO: change this global nonsense\n      this.game.global.coffeeCounter.add(coffee)\n    }\n  }\n}\n\nexport default Machine\n",
    "class Player extends Phaser.Sprite {\n  constructor(game) {\n    super(game, 150, 50, 'player')\n\n\n    this.game.physics.enable(this, Phaser.Physics.ARCADE)\n    this._bounds = new Phaser.Rectangle(100, 40, 40, 60)\n    // let debug = game.add.graphics(this._bounds.x, this._bounds.y);\n    // debug.beginFill(0x000077);\n    // debug.drawRect(0, 0, this._bounds.width, this._bounds.height);\n\n    this.x = this._bounds.centerX\n    this.y = this._bounds.centerY\n\n    this.inputEnabled = true;\n    this.anchor.set(0.5, 1);\n\n    // this.input.enableDrag();\n    this.input.boundsRect = this._bounds\n\n    this.game.stage.addChild(this)\n  }\n\n  // update() {}\n\n  moveTo(x, y) {\n    this.x = x\n    this.y = y\n    this.floorPosition()\n  }\n\n  floorPosition() {\n    this.x = Math.floor(this.x)\n    this.y = Math.floor(this.y)\n  }\n}\n\nexport default Player\n",
    "class StatsPanel extends Phaser.Group {\n  constructor(game) {\n    super(game)\n\n    this.bottomPanel = this.game.add.sprite(0, 0, 'bottomPanel')\n    this.panelText = this.game.add.bitmapText(7, 116, 'panelFont', 'Energy\\nDay 1\\tCash', 5)\n    // this.moneyText = this.game.add.bitmapText(7 + 100, 116 + 10, 'panelFont', 'Cash: ' + this.game.global.money, 5)\n    // this.dayText = this.game.add.bitmapText(7, 116 + 10, 'panelFont', 'Day: 1', 5)\n\n    this.bmd = game.make.bitmapData();\n    this.bmd.load('energyBar');\n    this.bmd.setHSL(0.2);\n    this.energyBar = this.game.add.sprite(37, 116, 'energyBar')\n    this._fullEnergyBarWidth = this.energyBar.width\n    this.cropRect = new Phaser.Rectangle(0, 0, this.energyBar.width, this.energyBar.height)\n    this.energyBar.crop(this.cropRect)\n  }\n\n  update() {\n    if(this.game.global.energy > 100) {\n      this.bmd.setHSL(0.2 + (this.game.global.energy - 100) / 200);\n    } else {\n      this.cropRect.width = this._fullEnergyBarWidth * this.game.global.energy / 100\n      this.energyBar.updateCrop()\n    }\n    this.energyBar.loadTexture(this.bmd)\n    let timedate = new Date(this.game.global.timePassed * 1000)\n    const time = timedate.toLocaleTimeString('en-US', {\n      hour12: true,\n      hour: \"numeric\",\n      minute: \"numeric\",\n      timeZone: \"UTC\"\n    })\n    const day = timedate.getDate()\n    // console.log(timedate.UTC())\n\n    this.panelText.text = `Energy\\nDay ${day} \\t\\t   Time ${time}\\t\\t   Cash $${this.game.global.money}`\n    // console.log(this.energyBar.width * this.game.global.energy / 100);\n  }\n}\n\nexport default StatsPanel\n",
    "class Boot extends Phaser.State {\n  preload() {\n    // Set some globals\n    // NOTE: this wont work if player restarts form menu\n\n\n    // Set 4x the scale\n    this.game.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;\n    this.game.scale.setUserScale(4, 4);\n\n    // Enable crisp rendering\n    // this.game.renderer.renderSession.roundPixels = true;\n    Phaser.Canvas.setImageRenderingCrisp(this.game.canvas)\n  }\n\n  create() {\n    this.state.start('Preloader')\n  }\n}\nexport default Boot\n",
    "import Coffee from 'objects/Coffee'\nimport Machine from 'objects/Machine'\nimport Player from 'objects/Player'\nimport CustomerFactory from 'objects/CustomerFactory'\nimport StatsPanel from 'objects/Stats'\n\nclass CoffeeShop extends Phaser.State {\n\n  create() {\n    this.game.global = {\n      maxEnergy: 100,\n      energy: 100.0,\n      money: 100,\n      damage: 0,\n      timePassed: 6 * 60 * 60,\n      timeToPass: 0.0\n    }\n\n    this.game.global.mS = this.game.add.audio('machineSound');\n    this.game.global.sS = this.game.add.audio('sellSound');\n    this.game.global.dS = this.game.add.audio('drinkSound');\n\n    //  Being mp3 files these take time to decode, so we can't play them instantly\n    //  Using setDecodedCallback we can be notified when they're ALL ready for use.\n    //  The audio files could decode in ANY order, we can never be sure which it'll be.\n\n    // this.game.sound.setDecodedCallback([mS, sS, dS], start, this);\n\n    this.game.time.events.loop(Phaser.Timer.SECOND * 3, () => this.game.global.timeToPass += 60, this)\n\n    let background = this.add.sprite(0, 0, 'shopBackground');\n    this.machine = new Machine(this.game, 120, 0)\n\n    this.game.global.coffeeCounter = this.game.add.group()\n    this.game.global.customerQueue = this.game.add.group()\n    this.game.global.player = new Player(this.game)\n\n    this.customerFactory = new CustomerFactory()\n    this.customerFactory.createCustomer(this.game)\n    // let customer = new Customer(this.game, 20, 30, 'customer')\n\n    // STATS\n    this.panel = new StatsPanel(this.game)\n\n\n  }\n  update() {\n    this.passTime()\n\n    this.game.global.customerQueue.sort('y', Phaser.Group.SORT_ASCENDING)\n    this.game.global.coffeeCounter.sort('y', Phaser.Group.SORT_ASCENDING)\n\n    // this.game.debug.text([this.game.input.x, this.game.input.y], 10, 20)\n\n    // Win/Lose conditions\n    if(this.game.global.energy < 0 || this.game.global.energy > 200 || this.game.global.money < 0 || this.game.global.timePassed > 86400) {\n      this.machine.destroy()\n      this.state.start('GameOver')\n    }\n  }\n\n  passTime() {\n    const CYCLE = 60 // seconds\n    let minutesPassed = 0\n    while(this.game.global.timeToPass > 1) {\n      // console.log(minutesPassed++)\n      this.game.global.timeToPass -= CYCLE\n      this.game.global.timePassed += CYCLE\n      this.customerFactory.inviteCustomer(this.game, this.game.global.timePassed * Phaser.Timer.SECOND)\n\n\n    }\n  }\n}\n\nexport default CoffeeShop\n",
    "// import Object from 'objects/Object';\n\nclass GameOver extends Phaser.State {\n\n  create() {\n    let title = this.game.add.bitmapText(20, 15, 'panelFont', `GAME OVER!\\n`, 5)\n    let massage = this.game.add.bitmapText(15, 40, 'panelFont', ``, 5)\n    let restart = this.game.add.bitmapText(15, 130, 'panelFont', 'New Game', 5)\n    restart.inputEnabled = true\n    restart.input.useHandCursor = true;\n    restart.events.onInputDown.add(this.newGame, this)\n\n    if(this.game.global.energy < 0) {\n      massage.text = `You died from exhaustion\\nBut you earned $${this.game.global.money-100}... yay!\\n${this.game.global.damage} coffees drunk`\n    } else if(this.game.global.energy > 200) {\n      massage.text = `You overdosed\\nBut you earned $${this.game.global.money-100}... yay!\\nOnly ${this.game.global.damage} coffees drunk`\n    } else if(this.game.global.money < 100) {\n      massage.text = `You lost all money\\nYou are fired!\\n${this.game.global.damage} coffees drunk\\nYour live length expentancy\\n after this day is ${Math.floor(16 + 80 * 1/Math.sqrt(this.game.global.damage))} years!`\n    } else {\n      massage.text = `You survived that day\\nBut you only earned $${this.game.global.money-100}!\\n${this.game.global.damage} coffees drunk\\nYour live length expentancy\\n after this day is ${Math.floor(16 + 80 * 1/Math.sqrt(this.game.global.damage))} years!`\n    }\n\n    this.game.global.player.destroy()\n  }\n\n  newGame() {\n    this.state.start('CoffeeShop')\n  }\n\n  createButton() {\n    this.levelText = this.game.add.bitmapText(0, t_sb_y + 70, 'myfont', '', 18);\n    this.add(this.levelText);\n    this.levelText.setText(Globals['level'].toString());\n    this.levelText.inputEnabled = true;\n    this.levelText.events.onInputDown.add(listener, this);\n\n    function listener() {\n      console.log('clicked');\n    }\n  }\n\n}\n\nexport default GameOver\n",
    "class Preloader extends Phaser.State {\n\n  preload() {\n    this.load.image('shopBackground', 'assets/images/shop.png')\n    this.load.image('coffee', 'assets/images/coffee.png')\n    this.load.image('machine', 'assets/images/machine1.png')\n    this.load.image('player', 'assets/images/coffee-guy.png')\n    this.load.image('cash', 'assets/images/cash.png')\n    this.load.spritesheet('customer', 'assets/images/customers16x36.png', 16, 36)\n    this.load.image('customers', 'assets/images/customers16x36.png')\n\n\n\n    this.load.image('bottomPanel', 'assets/images/statpanel.png')\n    this.load.image('energyBar', 'assets/images/energy-bar.png')\n    this.load.bitmapFont('defaultFont', 'assets/fonts/font.png', 'assets/fonts/font.fnt')\n    this.load.bitmapFont('panelFont', 'assets/fonts/panelFont.png', 'assets/fonts/font.fnt')\n\n    this.load.audio('machineSound', 'assets/sounds/machine.mp3');\n    this.load.audio('sellSound', 'assets/sounds/sell.mp3');\n    this.load.audio('drinkSound', 'assets/sounds/drink.mp3');\n  }\n\n  create() {\n    let bmd = this.game.make.bitmapData()\n    bmd.load('customer')\n    bmd.replaceRGB(0, 0, 0, 255, 255, 255, 255, 255);\n    this.cache.addSpriteSheet('customer_w', 'null', bmd.canvas, 16, 36)\n\n    this.state.start('CoffeeShop')\n  }\n}\n\nexport default Preloader\n"
  ]
}